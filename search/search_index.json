{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"SalesEnablement-L3-Guidance","text":""},{"location":"#salesenablement-l3-guidance","title":"SalesEnablement-L3-Guidance","text":"<p>This repository provides guidance for creating IBM Cloud Sales Enablement L3 Learning Plan content using Git Hub as a content repository and MkDocs to generate the end-user HTML and web site. </p> <p>The content provided here is based upon my personal experience in creating our first IBM Cloud platform Level 3 learning plan: (IBM Cloud Satellite).</p> <p>Some of the content here is based upon the work Jeff Goodhue et al. did related to L3 creation for Sales Enablement.</p> <p>There are 5 parts to this guidance which are accessible in the navigation to the left.</p> <p>I'm sure there is more missing, but its a start.</p>"},{"location":"TechZone/01%20Introduction/","title":"Introduction","text":"<p>IBM Technology Zone (TechZone) should be used for demonstration environments if possible. Their are many environments already built and collections that utilize them.</p> <p>The focus here is on IBM Cloud platform, so I'll relate how we created the environment and collection related to the IBM Cloud Satellite L3 learning plan.</p> <p>You can find the collection for the IBM Cloud Satellite L3 here.</p> <p>If an existing environment cannot be leveraged for your needs, you will want to create a custom request in the TechZone portal here. I don't know how long this typically takes as I worked through the process through past contacts in TechZone.</p> <p>The key pieces of work from an IBM Cloud platform perspective are:</p> <ul> <li>identify what you want to do and the resources required to do it</li> <li>decide if you want a shared environment where all users utilize the same cloud resources, or a dedicated environment where each user gets their own dedicated resources</li> </ul> <p>There are several factors that will go into deciding if you want a shared or dedicated environment, such as:</p> <ul> <li>provisioning time required for resources</li> <li>costs associated with required resources</li> <li>complexity of defining a shared environment</li> <li>maintenance/monitoring of shared environments (what happens if someone corrupts a resource)</li> </ul> <p>For shared resources, the biggest issue was identifying the appropriate IAM permissions required to allow a user to productively use the environment and accomplish your goals and NOT be able to cause issues with the environment. For IBM Cloud Satellite, we defined both roles and policies that were common for all users and then very narrow policies that scope access to very specific resources (e.g. a namespace within Kubernetes clusters). While IBM Cloud documentation as a whole tends to be pretty good, some offerings still have work to go in documenting and implementing fine-grained access control with IAM.</p> <p>To get started in developing your TechZone environment, you should leverage existing content creation guidance available on the TechZone portal.</p>"},{"location":"TechZone/02%20Satellite%20L3/","title":"Satellite L3 Details","text":"<p>The information is specific to the custom Sales Enablement Guidance TechZone environment. You will want to create a similar document for any new environments in the event it needs to be rebuilt. Given my experience with TechZone, this will most likely happen as I was forced to rebuild 3 times for various reasons.</p> <p>The TechZone environment created for this L3 is a shared/multi-tenant environment. In other words, instead of like other infrastructure TechZone environments where each user gets their own instances of resources, here a common set of cloud resources are shared by all users. The common resources need to be appropriately protected so users cannot cause damage to the shared resources. This is typically done by only granting the users the IBM Cloud IAM (identify access management) capabilities they require to accomplish their tasks and isolating the environment where they make changes. This is accomplished when TechZone processes the user's reservation for the environment.</p> <p>It will be your responsibility to define the access roles, policies, and any additional scripted/automated steps that need to be perform when a user is added and removed from the environment (reservation create/delete). As mentioned earlier, a custom environment will need to be requested.  TechZone will assign a developer to assist, but you will need to do most of the work.</p> <p>The following is the repository used by TechZone for the Sales Enablement Guidance: https://github.ibm.com/dte2-0/ccp-gitops-patterns/tree/main/ibm-satellite-lab. The scripts directory contains the SatLab-TZ-AddUser.sh and SatLab-TZ-DeleteUser.sh scripts I wrote. The IAM roles and policies are defined in main.tf. For this environment, we use a common access group (satellite-user), and then create a group for each user's reservation that further restricts their access to the Satellite configuration and OpenShift projects (namespaces).</p> <p>The following are the high level steps of what occurs when a reservation is started:</p> <ul> <li>Add user to the account (sends invite that the user must accept)</li> <li>Use the user's IBMID as a unique name instead of email address to create:</li> <li>Satellite configuration using that IBMID</li> <li>Satellite version that will create a project in an OpenShift cluster</li> <li>Satellite subscription that will use the above version to create the project in all OpenShift cluster groups</li> </ul> <p>The following are the high level steps of what occurs when a reservation expires:</p> <ul> <li>Remove any and all Satellite subscriptions in the users unique Satellite configuration</li> <li>Remove any and all Satellite versions in the users unique Satellite configuration</li> <li>Remove the users unique Satellite configuration</li> <li>Remove the users unique IAM access groups</li> <li>Remove the user from the account</li> </ul> <p>The share infrastructure is illustrated in the diagram below.</p> <p></p> <p>This environment was created using the IBM Cloud portal. At this point I have not created scripts to automate this process as it should only have to be done once, however, it would be nice to automate and wouldn't be that hard.</p> <p>The following are the high level steps to create this environment:</p> <ul> <li>Obtain AWS credentials from TechZone contact</li> <li>Create a Satellite Location in AWS using the IBM Cloud Satellite AWS quick start terraform scripts.</li> <li>Location name: aws-us-east-2 (Note: if you change this name, you will need to update the mkdocs.yml for the L3 demonstration script and rebuild (mkdocs gh-deploy) the demonstration script in the GitHub Pages).</li> <li>AWS region: us-east-2</li> <li>3 control plane hosts</li> <li>9 additional hosts</li> <li>AWS image configuration used: m5d.2xlarge</li> <li>Managed from location: Washington, DC</li> </ul> <p>The video of the actual creation of the above environment is in Part 1 of the learning plan demonstration script.</p> <p>Next, the RedHat OpenShift on IBM Cloud (ROKS) clusters need to be created. For this L3, we have a ROKS cluster running in IBM Cloud in Washington, DC and one running in our Satellite location. Each of these are deployed with 9 worker nodes. The video of the actual creation of the above environment is in Part 2 of the learning plan demonstration script. (Note: if you change this names of the clusters, you will need to update the mkdocs.yml for the L3 demonstration script and rebuild (mkdocs gh-deploy) the demonstration script in the GitHub Pages).</p> <p>Once the ROKS clusters are completely up, running, and available, the ROKS in the AWS Satellite location needs to be configured to use the public IP addresses for the hosts in AWS (by default, they use private IPs.). This requirement is documented in the Satellite product documentation, as well as the other this TechZone collection: Setup a IBM Cloud Satellite Location in AWS. I did automate this process with a script.  This script is part of the Satellite L3 repository and can be retrieved using the following command:</p> <pre><code> wget https://raw.githubusercontent.com/IBM/SalesEnablement-Satellite-L3/main/tools/satelliteSwapIPs.bash\n</code></pre> <p>The script is interactive and straight forward to use.</p> <p>To get rid of ingress controller warnings on AWS cluster, see: https://cloud.ibm.com/docs/satellite?topic=satellite-ts-degraded-ingress</p> <p>The ROKS cluster running in IBM Cloud also needs to be registered with your IBM Cloud Satellite instance. This is done via the IBM Cloud Portal in the Satellite clusters pages.</p> <p>Next, the Satellite Cluster Groups need to be created. One group for each of the clusters. Those are used in deploying the cloud native application as well as the versions/subscriptions created on new reservations to add projects (namespaces) to the ROKS clusters. These are:</p> <p>food-deliver-production-clusters - IBM ROKS cluster  food-delivery-development-clusters - AWS ROKS cluster</p> <p>(Note: if you change this names of the cluster groups, you will need to update the mkdocs.yml for the L3 demonstration script and rebuild (mkdocs gh-deploy) the demonstration script in the GitHub Pages).</p> <p>Finally, you need to test, test, and test again. I've created a couple of scripts that automate the manual steps the users do in Part 3 of the demonstration script. These are stored in the Satellite L3 repository (tools directory) and can be retrieved using the following command:</p> <pre><code> wget https://raw.githubusercontent.com/IBM/SalesEnablement-Satellite-L3/main/tools/deployIBMSatL3.bash\n wget https://raw.githubusercontent.com/IBM/SalesEnablement-Satellite-L3/main/tools/destroyIBMSatL3.bash\n</code></pre>"},{"location":"creating%20content/01%20Introduction/","title":"Introduction","text":"<p>It is strongly suggested you read through the MkDocs and Material theme documentation prior go building content.  You can also leverage existing content as working examples like the IBM Cloud Power Virtual Server L3 content:</p> <ul> <li> <p>Published content</p> </li> <li> <p>Source content</p> </li> </ul> <p>Where possible, you should follow the style guidelines from our Center of Excellence.</p> <p>A few suggestions:</p> <ul> <li> <p>Videos</p> <p>There are several options for referencing videos in your content.</p> <ol> <li>Embed in content/repository - This is probably the simplest mechanism but there are limitations to the size of files in Git Hub. You can use tools like Handbrake to shrink video files. If you go this route, make sure you have the MkDocs videos plugin installed (mkdcos-video). Create a directory called _videos in your content folders and place videos there and reference using: <code>![type:video](./_videos/video.mp4)</code>.</li> <li>Use Seismic, Watson Media, Youtube or other video streaming services - For videos that are activities in Your Learning, you will probably want to use one these repositories.  You can also link to these videos in your content as well.</li> </ol> </li> <li> <p>Links</p> <p>When linking to external content, make sure you use <code>target=\"_blank\"</code> in your href.  This will force the link to open in a new tab or window of the user's browser.</p> </li> <li> <p>Make things line up</p> <p>Things should line up in your content as described in the COE. MKDOCS can be a little strange to figure out. For instance, to ge an image to line up under a numbered item, you must have the image definition preceded by 4 spaces, like:</p> <pre><code>1. Click the IBM Cloud portal menu ![](_attachments/hamburgerIcon.png), expand the **Observability** menu and click **Monitoring**.\n\n    ![](_attachments/MonitoringMenu.png)\n</code></pre> </li> </ul>"},{"location":"git-setup/01%20Introduction/","title":"Introduction","text":"<p>IBM's enterprise GitHub is used as the repository for our content.</p> <p>The instructions here assume you have a IBM GitHub identity.  If you don't, you will need one before proceeding. Go here to get started.</p>"},{"location":"git-setup/02%20Create%20IBM%20GitHub%20respository/","title":"Create IBM GitHub repository","text":"<p>The creation of new repositories is automated, simple, and fast.  All you need to do is:</p> <ol> <li> <p>Go to https://github.ibm.com/open-source/request-a-new-repo-bot</p> </li> <li> <p>Go to Issues</p> </li> <li> <p>Click New issue</p> </li> <li> <p>Click Get started</p> </li> <li> <p>Complete the form. Just update the first 7 values in the form (remove teams, remove template).</p> </li> </ol> <p>Below are the values I used in creating this repository:</p> <pre><code>* name: SalesEnablement-L3-Guidance\n* users: andrewj2000\n* teams: team_1, team_2 (*Optional*) **REMOVE THIS LINE IF NOT NEEDED**\n* description: Sales Enablement guidance for creating L3 Learning PLans and content\n* template: template_1 (*Optional*) **REMOVE THIS LINE IF NOT NEEDED**\n* license: apache-2.0\n* approval: yes\n</code></pre> <ol> <li>Click Submit new issue</li> <li>Watch your email and follow the directions there.</li> </ol>"},{"location":"git-setup/03%20Configure%20GitHub%20Pages/","title":"Configure GitHub Pages","text":"<p>You need to configure GitHub Pages to work with MkDocs.  In theory, you should follow good source code repository practices and use at least a development and main branches, use pull requests, and properly review changes. Refer to the GitHub documentation for more information.</p> <p>Once you have your IBM GitHub repository created, follow these instructions:</p> <ol> <li>Go to your IBM GitHub repositories</li> <li>Create a new branch called gh-pages</li> </ol> <p></p> <ol> <li>Go to \"Settings-&gt;Pages\"</li> <li>Change the Source Settings to point to the root of your gh-pages branch</li> </ol> <p>Initial screen may look like this:</p> <p></p> <p>You need to change the Source settings to look like below. Note, this may happen automatically when you create teh branch in step 2 above.</p> <p></p> <ol> <li>Click the link for your published site.</li> </ol> <p>This will go to a new view of your README.md file that was created with your new IBM GitHub repository. Note, at this point the output here isn't real \"pretty\". Don't worry, this will change once we start using MkDocs.</p> <ol> <li> <p>Return to your IBM GitHub repository in your browser (browser back button if you didn't open step 5 in a new window/tab).</p> </li> <li> <p>Verify the Pages build completed by viewing the Actions tab in your repository.</p> </li> </ol> <p></p>"},{"location":"machine-setup/01%20Introduction/","title":"Introduction","text":"<p>In creating the initial L3 for IBM Cloud Satellite, I followed guidance from Jeff Goodhue and others.  I've attempted to capture it all here, but this may need further testing.  If your run into issues, reach out to me (@andrewj in slack).</p> <p>Instructions for both Mac and Windows are now included. Thanks to Connie West for helping with the Windows related installation information.</p> <p>Things change!</p> <p>The instructions here are a point in time. If you find things have changed (versions, steps, etc.), please open an issue in this git repository or if you have write permission, update the docs for the next person.</p>"},{"location":"machine-setup/02%20Install%20git/","title":"Install github desktop","text":"<p>Using the IBM app store for your operating system, install GitHub Desktop. </p> <p>Mac@IBM application</p> <p>IBM Windows App Store</p> <p></p>"},{"location":"machine-setup/03%20Install%20MKDOCS%20and%20plugins/","title":"Install MkDocs and plugins","text":"<p>MkDocs is used to build nicely formatted output based upon the GitHub markdown content you will be creating. As an example, the IBM Cloud Satellite L3 is specified in this GitHub repository and the MKDOCS build output can be found here.</p> <p>MkDocs is well documented here: https://www.mkdocs.org/. You can also do google searches on MkDocs for lots of other useful content and primers. </p> <p>The steps that follow assume you have python already installed. If you do not, you will need to install them first. More specific instructions can be found in the MkDocs Installation guide which includes a link on how to install Python.</p> <p>Windows users</p> <p>If you are using Windows, some of the commands below may not work. Try using python -m like this: </p><pre><code>    python -m pip install mkdocs\n    python -m mkdocs\n</code></pre> For a more permanent solution, you may need to edit your PATH environment variable to include the Scripts directory of your Python installation. Recent versions of Python include a script to do this for you. Navigate to your Python installation directory (for example C:\\Python38), open the Tools, then Scripts folder, and run the win_add2path.py file by double clicking on it. Alternatively, you can download the script and run it (python win_add2path.py).  <p>To install, follow these steps:</p> <ol> <li>Install pip:</li> </ol> <p></p><pre><code>python -m pip install --upgrade pip\n</code></pre> or <pre><code>python3 -m pip3 install --upgrade pip3\n</code></pre> <ol> <li>Install MKDOCS</li> </ol> <pre><code>pip install mkdocs\n</code></pre> <p>or</p> <pre><code>pip3 install mkdocs\n</code></pre> <ol> <li>Install MKDOCS material theme</li> </ol> <p>Material is the name of the theme we are using in MkDocs.  You can learn more about it here.</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>or </p> <pre><code>pip3 install mkdocs-material\n</code></pre> <ol> <li>Install MKDOCS macros plugin</li> </ol> <p>The macros plugin for MkDocs provides lots of useful tools that we use in our builds.  You can learn more about it here.</p> <pre><code>pip install mkdocs-macros-plugin\n</code></pre> <p>or </p> <pre><code>pip3 install mkdocs-macros-plugin\n</code></pre> <ol> <li>Install MkDocs video plugin</li> </ol> <p>The MkDocs video plugin is used to embed videos in our documents.  You can learn more about it here.</p> <pre><code>pip install mkdocs-video\n</code></pre> <p>or</p> <pre><code>pip3 install mkdocs-video\n</code></pre> <ol> <li>Need to see if this works:</li> </ol> <pre><code>pip install pymdown-extensions\n</code></pre> <p>or </p> <pre><code>pip3 install pymdown-extensions\n</code></pre> <p>Note, there are many more MkDocs themes and plugins that you may find useful in your content development.  However, to be consistent with other IBM Cloud L3s, I suggest sticking with the Material plugin that you just installed.</p>"},{"location":"machine-setup/04%20The%20Atom%20editor/","title":"04 The Atom editor","text":"<p>I use the Atom editor which provides a nice tool for not only editing the markdown content that we create, but it also integrates with GitHub making it easy to push content from your local copy to GitHub.</p> <p>I am by no means an expert on Atom, but hopefully the instructions below will get you started.  There are lots of good web sites with documentation, just use google.</p> <p>To install, simply go to https://atom.io and click the download button.</p> <p>I also added the plugins to Atom that are found here.</p>"},{"location":"machine-setup/04%20Visual%20Studio%20Code/","title":"Visual Studio Code","text":"<p>Using the IBM app store for your operating system, install Visual Code Studio (VSC). </p> <p>Mac@IBM application</p> <p>IBM Windows App Store</p> <p></p> <p>More information about VSC can be found here.</p> <p>Install the following VSC extensions. This is done using VSC, but you can also explore the VSC catalog. To learn more about extensions go here. </p> <ul> <li>Acrolinx</li> <li>Auto-Open Markdown Preview</li> <li>Code Spell Checker</li> <li>GitHub Pull Requests</li> <li>GitHub Repositories</li> <li>Hashicorp Terraform</li> <li>Markdown All in One</li> <li>Markdown Preview</li> <li>Markdown Preview Enhanced</li> <li>YAML</li> </ul> <p>Here is a short video that shows how to install an extension in VSC:</p> <p></p>"},{"location":"using%20MkDocs/01%20Introduction/","title":"Introduction","text":"<p>If you have everything setup properly, you should be ready to try and create some markdown and to run a MkDocs build.</p> <p>Tip</p> <p>MkDocs has a built in server so you can dynamically watch the updates you are making on your local copy of your repository as the content is saved.  I'm not going to document how to do that, but reference the MkDocs documentation for details.</p>"},{"location":"using%20MkDocs/02%20Clone%20your%20git%20repository/","title":"Clone your git repository","text":"<p>First, you need to create a local copy of your IBM Git Repository. </p> <p>Note, there Visual Studio Code does have a wizard that will allow you to perform this setup when it is first started or when you open a new Window from the File menu option. Using that feature should eliminate the steps below.</p> <ol> <li>Open a terminal on your Mac.</li> <li> <p>Create a working directory for your repositories.</p> <p>I chose ~/Documents/MKDOCS. Probably not the most logical choice. Since that is where mine is any screen images I put in here will show that.</p> <pre><code>mkdir ~/Documents/MKDOCS\n</code></pre> </li> <li> <p>Change directory to the directory you just created.</p> <pre><code>cd ~/Documents/MKDOCS\n</code></pre> </li> <li> <p>Copy the git clone command for your IBM GitHub repository.</p> <p></p> </li> <li> <p>Paste and execute the git clone command for your IBM GitHub repository in your terminal.</p> <p>Example</p> <p>andrewjones@MacBook-Pro-2 MKDOCS % gh repo clone IBM/SalesEnablement-L3-Guidance</p> <p>Cloning into 'SalesEnablement-L3-Guidance'...</p> <p>remote: Enumerating objects: 4, done.</p> <p>remote: Counting objects: 100% (4/4), done.</p> <p>remote: Compressing objects: 100% (4/4), done.</p> <p>remote: Total 4 (delta 0), reused 0 (delta 0), pack-reused 0</p> <p>Unpacking objects: 100% (4/4), done.</p> </li> </ol>"},{"location":"using%20MkDocs/03%20Create%20MkDocs%20project/","title":"Create MkDocs project","text":"<p>To start using MkDocs, you need to initialize your project folder. These steps can be performed in the Visual Code Studio terminal as well or via the GUI when opening a new widow.</p> <ol> <li>Open a terminal.</li> <li>Change directory to the parent directory of your IBM GitHub repository clone.</li> </ol> <pre><code>cd ~/MKDOCS\n</code></pre> <ol> <li>Run the mkdocs new command:</li> </ol> <pre><code>mkdocs new SalesEnablement-L3-guidance\n</code></pre> <p>Example</p> <p>INFO     -  Writing config file: SalesEnablement-L3-Guidance/mkdocs.yml INFO     -  Writing initial docs: SalesEnablement-L3-Guidance/docs/index.md</p> <ol> <li>Verify there is now a mkdocs.yml file and a docs directory.</li> </ol> <pre><code>cd SalesEnablement-L3-Guidance\nls\n</code></pre> <p>Example</p> <p>LICENSE       README.md      docs    mkdocs.yml</p> <p>The LICENSE and README.md came from the clone of the repository and the mkdocs.yml file and docs directory were created by MkDocs.</p> <ol> <li>In your project directory, create a .gitignore file to ignore the MkDocs build files that don't need to be pushed to your repository.</li> </ol> <pre><code>echo \"site/\" &gt;&gt; .gitignore\n</code></pre>"},{"location":"using%20MkDocs/04%20Create%20content%20using%20Atom%20editor/","title":"04 Create content using Atom editor","text":"<p>You are ready to start creating content.  For this example we will keep it real simple.</p> <ol> <li>Open the Atom editor.</li> <li>In Atom create add new project folder using File-&gt;Add Project Folder</li> </ol> <p>This will open a file dialog.  Select your IBM GitHub clone directory (e.g. ~/Documents/MKDOCS/SalesEnablement-L3-Guidance).</p> <p>The new project will appear in the left hand navigation.  If you expand it, you will see the mkdocs.yml file and docs directory.</p> <p>At this point, you need to read the MkDocs user's guide for how to create content and update your mkdocs.yml file.  You can use repository as an example.</p> <p>As you modify your mkdocs.yml file and add content in your docs directory, you will notice on the left hand side of the Atom editor that Unstaged Changes are added when you save your work.  When you are ready, you can move those changes a Staging area by clicking the Stage All link.</p> <p></p> <p>If you are happy with those changes, you can commit them to your IBM GitHub repository by entering a commit message and clicking the Commit to main button.</p> <p></p> <p>Note: As a best practice you shoudl utilize brances, pull requests, etc. in GitHub. </p>"},{"location":"using%20MkDocs/04%20Create%20content%20using%20Visual%20Studio%20Code/","title":"Create content using Visual Studio Code","text":"<p>You are ready to start creating content.  For this example we will keep it real simple.</p> <ol> <li>Open Visual Code Studio.</li> <li>Click File and then Open Folder</li> <li>Select your IBM GitHub clone directory (e.g. ~/Documents/MKDOCS/SalesEnablement-L3-Guidance).</li> <li> <p>The folder will appear in the left hand navigation.  If you expand it, you will see the mkdocs.yml file and docs directory.</p> </li> <li> <p>At this point, you need to read the MkDocs user's guide for how to create content and update your mkdocs.yml file.  You can use repository as an example.</p> </li> </ol> <p>As you modify your mkdocs.yml file and add content in your docs directory, you will notice on the left hand side of Visual Code Studio that a count of the Unstaged Changes appear on the Source Control icon.  </p> <ol> <li>When you are ready, you can commit the changes to your IBM GitHub repository by entering a commit message and clicking the Commit button and then sync the changes by clicking Sync Changes.</li> </ol> <p>Note: As a best practice you should utilize branches, pull requests, etc. in GitHub. </p> <p>Here is an example mkdocs.yml file for the material theme:</p> <pre><code># Project info\nsite_name: IBM Power Virtual Server Level 3 Demonstration Guide\nsite_description: IBM Power Virtual Server Sales Enablement Level 3 Demonstration Guide\nsite_author: Andrew R. Jones (andrewj@us.ibm.com)\ncopyright: Copyright &amp;copy; 2022 IBM\n\n# Repository\nrepo_name: IBM/SalesEnablement-test-repo\n#repo_url: https://github.com/IBM/SalesEnablement-PowerVS-L3\n#edit_uri: edit/master/docs\ndocs_dir: docs\n\n\nnav:\n  - Introduction: 'index.md'\n  - Part 1 - Overview:\n    - 'Introduction': 'Part 1/01 Introduction.md'\n    - 'Reserve the environment': 'Part 1/02 Reserve.md'\n  - Part 2 - Provisioning a PowerVS workspace:\n    - 'Introduction': 'Part 2/01 Introduction.md'\n    # - 'Watch a service being provisioned': 'Part 2/02 Watch-service.md'\n    - 'Click through demonstration of a workspace being provisioned': 'Part 2/03 Clickthru-service.md'\n  - Part 3 - Provisioning a PowerVS instance:\n    - 'Introduction': 'Part 3/01 Introduction.md'\n    # - 'Watch a instance being provisioned': 'Part 3/02 Watch-instance.md'\n    - 'Click through provisioning demonstration - AIX': 'Part 3/03 Clickthru-AIXvsi.md'\n    - 'Click through provisioning demonstration - Linux': 'Part 3/04 Clickthru-Linuxvsi.md'\n    - 'Click through provisioning demonstration - IBM i': 'Part 3/05 Clickthru-IBMivsi.md'\n  - Part 4 - Managing PowerVS instances:\n    - 'Introduction': 'Part 4/01 Introduction.md'\n    - 'Managing instances': 'Part 4/02 Explore-managing-instances.md'\n  - Part 5 - Accessing PowerVS instances:\n    - 'Introduction': 'Part 5/01 Introduction.md'\n    - 'Access an instance': 'Part 5/02 Access-instance.md'\n  - Part 6 - Explore other PowerVS topics:\n    - 'Introduction': 'Part 6/01 Introduction.md'\n    - 'Virtual appliances': 'Part 6/02 VirtualAppliances.md'\n    - 'Shared processor pools': 'Part 6/03 SPPsAndServerPlacementGroups.md'\n    - 'SSH keys': 'Part 6/04 SSHKeys.md'\n    - 'Boot images': 'Part 6/05 BootImages.md'\n    - 'Networking': 'Part 6/06 Networking.md'\n    - 'Storage volumes': 'Part 6/07 StorageVolumes.md'\n    - 'Event logs': 'Part 6/08 EventLogs.md'\n    - 'Additional products and services': 'Part 6/09 AdditionalServices.md'\n  - Part 7 - Use the PowerVS command line interfaces (CLI):\n    - 'Introduction': 'Part 7/01 Introduction.md'\n    - 'Command line exercises': 'Part 7/02 CLIs.md'\n  - Part 8 - Observing PowerVS resources:\n    - 'Introduction': 'Part 8/01 Introduction.md'\n    - 'IBM Cloud Monitoring': 'Part 8/02 IBM Cloud Monitoring.md'\n    - 'IBM Activity Tracker': 'Part 8/03 IBM Cloud Activity Tracker.md'\n  - Part 9 - New features:\n    - 'Introduction': 'Part 9/01 Introduction.md'\n    - 'Dedicated hosts': 'Part 9/02 Dedicated hosts.md'\n    - 'Deployable architectures': 'Part 9/03 Deployable architectures.md'\n  - Part 10 - Next steps:\n    - 'Next steps': 'Part 10/01 Next steps.md'\n\ntheme:\n  name: material\n  features:\n    - navigation.instant\n    - navigation.tracking\n    - content.code.annotate\n    - content.code.copy\n  palette:\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      toggle:\n        icon: material/toggle-switch-off-outline\n        name: Switch to dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/toggle-switch\n        name: Switch to light mode\n\nplugins:\n    - mkdocs-video\n    - macros\n    - search\n\nmarkdown_extensions:\n  - sane_lists\n  - pymdownx.details\n  - admonition\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n  - pymdownx.keys\n  - attr_list\n  - md_in_html\n\nextra:\n  generator: false\n  supportEmail: \"andrewj@us.ibm.com\"\n  supportSlack: \n    name: \"#cloud-platform-demo-feedback\"\n    url: \"https://ibm-technology-sales.slack.com/archives/C03PQ47KRQE\"\n  learningplan:\n    name: \"IBM Power Virtual Server for Technical Sales - Level 3\"\n    url: \"https://yourlearning.ibm.com/activity/PLAN-7D757C8B58E7\"\n  offering:\n    name: \"IBM Power Virtual Server\"\n  guide:\n    name: \"IBM Power Virtual Server - Level 3 Demonstration Guide\"\n    url: \"https://ibm.github.io/SalesEnablement-PowerVS-L3/\"\n  tz_environment:\n    name: \"IBM Power Virtual Server - Sales Enablment L3\"\n    url: \"https://techzone.ibm.com/my/reservations\"\n  account: \"2305900 - ITZ - ADHOC03\"\n  powerVS:\n    serviceInstanceName: \"PowerVS-L3-2024\"\n    serviceInstanceRG: \"PowerVS-L3\"\n    serviceInstanceLocation: \"WDC07\"\n    placementGroup1: \"GroupTogether\"\n    placementGroup2: \"GroupApart\"\n    sshKey: \"PowerVS-key\"\n    privateSubnet: \"private-powervs-2024\"\n    privateSubnetCIDR: \"192.168.100.0/24\"\n    privateSubnetGW: \"192.168.100.15\"\n    privateSubnetDNS: \"127.0.0.1\"\n    publicSubnet: \"public-192_168_222_192-29-VLAN_2056\n\"\n    monitoringInstance: \"PowerVS-L3-Monitoring\"\n    atInstance: \"AT-PowerVS-L3\"\n  aixServer1:\n    name: \"AIX-VM\"\n    privateIP: \"192.168.100.112\"\n    publicIP: \"150.239.207.227\"\n    additionalVolumeName: \"aix-av1\"\n  linuxServer1:\n    name: \"Linux-VM\"\n    privateIP: \"192.168.100.173\"\n    publicIP: \"150.239.207.226\"\n    additionalVolumeName: \"linux-av1\"\n  ibmiServer1:\n    name: \"IBMi-VM\"\n    privateIP: \"192.168.100.157\"\n    publicIP: \"150.239.207.228\"\n    additionalVolumeName: \"ibmi-av1\"\n</code></pre>"},{"location":"using%20MkDocs/05%20Doing%20your%20first%20MkDocs%20gh-deploy/","title":"Doing your first MkDocs gh-deploy","text":"<p>Once these changes are commit, to do the build with MkDocs, follow these steps.</p> <ol> <li>Open a terminal in Visual Code Studio</li> <li>Run mkdocs gh-deploy</li> </ol> <pre><code>mkdocs gh-deploy\n</code></pre> <p>Example</p> <p>INFO     -  [macros] - Macros arguments: {'module_name': 'main',</p> <pre><code>   'modules': [], 'include_dir': '', 'include_yaml': [],\n\n   'j2_block_start_string': '', 'j2_block_end_string': '',\n\n   'j2_variable_start_string': '', 'j2_variable_end_string': '',\n\n   'verbose': False}\n</code></pre> <p>INFO     -  [macros] - Extra variables (config file): ['learningplan',</p> <pre><code>   'tz_environment', 'account', 'aws', 'ibm']\n</code></pre> <p>INFO     -  [macros] - Extra filters (module): ['pretty']</p> <p>INFO     -  Cleaning site directory</p> <p>INFO     -  Building documentation to directory:</p> <pre><code>   /Users/andrewjones/Documents/MKDOCS/SalesEnablement-L3-Guidance/site\n</code></pre> <p>INFO     -  The following pages exist in the docs directory, but are not</p> <pre><code>   included in the \"nav\" configuration:\n\n                    - index.md\n</code></pre> <p>INFO     -  Documentation built in 0.75 seconds</p> <p>INFO     -  Copying</p> <pre><code>   '/Users/andrewjones/Documents/MKDOCS/SalesEnablement-L3-Guidance/site'\n\n   to 'gh-pages' branch and pushing to GitHub.\n</code></pre> <p>Counting objects: 87, done.</p> <p>Delta compression using up to 16 threads.</p> <p>Compressing objects: 100% (71/71), done.</p> <p>Writing objects: 100% (87/87), 3.67 MiB | 1.11 MiB/s, done.</p> <p>Total 87 (delta 17), reused 0 (delta 0)</p> <p>remote: Resolving deltas: 100% (17/17), done.</p> <p>To https://github.com/IBM/SalesEnablement-L3-Guidance.git</p> <p>bb3eecb..9cd7e92  gh-pages -&gt; gh-pages</p> <p>INFO     -  Your documentation should shortly be available at:</p> <pre><code>   https://IBM.github.io/SalesEnablement-L3-Guidance/\n</code></pre> <p>You will need to carefully review the output of the mkdocs gh-deploy command.  If you see WARNING these are typically mismatches between files you are trying to include in your mkdocs.yml navigation and the actual file names in the project.</p> <p>Check the status your deployment in GitHub web UI.</p> <ol> <li>Click the github-pages link at bottom right of screen.</li> </ol> <p></p> <p>It may take a few minutes for your build to be scheduled and completed.</p> <ol> <li>Verify your the update has been deployed.</li> </ol> <p></p> <ol> <li>Click the View Deployment button to view the new web site.</li> </ol>"}]}