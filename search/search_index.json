{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction","text":""},{"location":"#salesenablement-l3-guidance","title":"SalesEnablement-L3-Guidance","text":"<p>This repository provides guidance for creating IBM Cloud Sales Enablement L3 Learning Plan content using Git Hub as a content repository and MkDocs to generate the end-user HTML and web site. </p> <p>The content provided here is based upon my personal experience in creating our first IBM Cloud platform Level 3 learning plan.</p> <p>In several chapters you will see a warning message like this:</p> <p>Warning</p> <p>These steps only need to be completed if you are creating a new L3 and working with a brand new repository. If you are modifying an existing L3 or playing with the test repository, you will not need to do these steps.</p> <p>You don't have to do these steps unless you are doing a brand new L3; however, I encourage you to read though these pages.</p> <p>There are 5 parts to this guidance which are accessible in the navigation to the left.</p> <p>I'm sure there is more missing, but its a start.</p>"},{"location":"TechZone/01%20Introduction/","title":"Introduction","text":"<p>This section needs to be re-written. Some links are broken. Left here for informational purposes.</p> <p>IBM Technology Zone (TechZone) should be used for demonstration environments if possible. Their are many environments already built and collections that utilize them.</p> <p>The focus here is on IBM Cloud platform, so I'll relate how we created the environment and collection related to the IBM Cloud Satellite L3 learning plan.</p> <p>You can find the collection for the IBM Cloud Satellite L3 here.</p> <p>If an existing environment cannot be leveraged for your needs, you will want to create a custom request in the TechZone portal here. I don't know how long this typically takes as I worked through the process through past contacts in TechZone.</p> <p>The key pieces of work from an IBM Cloud platform perspective are:</p> <ul> <li>identify what you want to do and the resources required to do it</li> <li>decide if you want a shared environment where all users utilize the same cloud resources, or a dedicated environment where each user gets their own dedicated resources</li> </ul> <p>There are several factors that will go into deciding if you want a shared or dedicated environment, such as:</p> <ul> <li>provisioning time required for resources</li> <li>costs associated with required resources</li> <li>complexity of defining a shared environment</li> <li>maintenance/monitoring of shared environments (what happens if someone corrupts a resource)</li> </ul> <p>For shared resources, the biggest issue was identifying the appropriate IAM permissions required to allow a user to productively use the environment and accomplish your goals and NOT be able to cause issues with the environment. For IBM Cloud Satellite, we defined both roles and policies that were common for all users and then very narrow policies that scope access to very specific resources (e.g. a namespace within Kubernetes clusters). While IBM Cloud documentation as a whole tends to be pretty good, some offerings still have work to go in documenting and implementing fine-grained access control with IAM.</p> <p>To get started in developing your TechZone environment, you should leverage existing content creation guidance available on the TechZone portal.</p>"},{"location":"TechZone/02%20Satellite%20L3/","title":"Satellite L3 Details","text":"<p>This section needs to be re-written. Some links are broken. Left here for informational purposes.</p> <p>The information is specific to the custom Sales Enablement Guidance TechZone environment. You will want to create a similar document for any new environments in the event it needs to be rebuilt. Given my experience with TechZone, this will most likely happen as I was forced to rebuild 3 times for various reasons.</p> <p>The TechZone environment created for this L3 is a shared/multi-tenant environment. In other words, instead of like other infrastructure TechZone environments where each user gets their own instances of resources, here a common set of cloud resources are shared by all users. The common resources need to be appropriately protected so users cannot cause damage to the shared resources. This is typically done by only granting the users the IBM Cloud IAM (identify access management) capabilities they require to accomplish their tasks and isolating the environment where they make changes. This is accomplished when TechZone processes the user's reservation for the environment.</p> <p>It will be your responsibility to define the access roles, policies, and any additional scripted/automated steps that need to be perform when a user is added and removed from the environment (reservation create/delete). As mentioned earlier, a custom environment will need to be requested.  TechZone will assign a developer to assist, but you will need to do most of the work.</p> <p>The following is the repository used by TechZone for the Sales Enablement Guidance: https://github.ibm.com/dte2-0/ccp-gitops-patterns/tree/main/ibm-satellite-lab. The scripts directory contains the SatLab-TZ-AddUser.sh and SatLab-TZ-DeleteUser.sh scripts I wrote. The IAM roles and policies are defined in main.tf. For this environment, we use a common access group (satellite-user), and then create a group for each user's reservation that further restricts their access to the Satellite configuration and OpenShift projects (namespaces).</p> <p>The following are the high level steps of what occurs when a reservation is started:</p> <ul> <li>Add user to the account (sends invite that the user must accept)</li> <li>Use the user's IBMID as a unique name instead of email address to create:</li> <li>Satellite configuration using that IBMID</li> <li>Satellite version that will create a project in an OpenShift cluster</li> <li>Satellite subscription that will use the above version to create the project in all OpenShift cluster groups</li> </ul> <p>The following are the high level steps of what occurs when a reservation expires:</p> <ul> <li>Remove any and all Satellite subscriptions in the users unique Satellite configuration</li> <li>Remove any and all Satellite versions in the users unique Satellite configuration</li> <li>Remove the users unique Satellite configuration</li> <li>Remove the users unique IAM access groups</li> <li>Remove the user from the account</li> </ul> <p>The share infrastructure is illustrated in the diagram below.</p> <p></p> <p>This environment was created using the IBM Cloud portal. At this point I have not created scripts to automate this process as it should only have to be done once, however, it would be nice to automate and wouldn't be that hard.</p> <p>The following are the high level steps to create this environment:</p> <ul> <li>Obtain AWS credentials from TechZone contact</li> <li>Create a Satellite Location in AWS using the IBM Cloud Satellite AWS quick start terraform scripts.</li> <li>Location name: aws-us-east-2 (Note: if you change this name, you will need to update the mkdocs.yml for the L3 demonstration script and rebuild (mkdocs gh-deploy) the demonstration script in the GitHub Pages).</li> <li>AWS region: us-east-2</li> <li>3 control plane hosts</li> <li>9 additional hosts</li> <li>AWS image configuration used: m5d.2xlarge</li> <li>Managed from location: Washington, DC</li> </ul> <p>The video of the actual creation of the above environment is in Part 1 of the learning plan demonstration script.</p> <p>Next, the RedHat OpenShift on IBM Cloud (ROKS) clusters need to be created. For this L3, we have a ROKS cluster running in IBM Cloud in Washington, DC and one running in our Satellite location. Each of these are deployed with 9 worker nodes. The video of the actual creation of the above environment is in Part 2 of the learning plan demonstration script. (Note: if you change this names of the clusters, you will need to update the mkdocs.yml for the L3 demonstration script and rebuild (mkdocs gh-deploy) the demonstration script in the GitHub Pages).</p> <p>Once the ROKS clusters are completely up, running, and available, the ROKS in the AWS Satellite location needs to be configured to use the public IP addresses for the hosts in AWS (by default, they use private IPs.). This requirement is documented in the Satellite product documentation, as well as the other this TechZone collection: Setup a IBM Cloud Satellite Location in AWS. I did automate this process with a script.  This script is part of the Satellite L3 repository and can be retrieved using the following command:</p> <pre><code> wget https://raw.githubusercontent.com/IBM/SalesEnablement-Satellite-L3/main/tools/satelliteSwapIPs.bash\n</code></pre> <p>The script is interactive and straight forward to use.</p> <p>To get rid of ingress controller warnings on AWS cluster, see: https://cloud.ibm.com/docs/satellite?topic=satellite-ts-degraded-ingress</p> <p>The ROKS cluster running in IBM Cloud also needs to be registered with your IBM Cloud Satellite instance. This is done via the IBM Cloud Portal in the Satellite clusters pages.</p> <p>Next, the Satellite Cluster Groups need to be created. One group for each of the clusters. Those are used in deploying the cloud native application as well as the versions/subscriptions created on new reservations to add projects (namespaces) to the ROKS clusters. These are:</p> <p>food-deliver-production-clusters - IBM ROKS cluster  food-delivery-development-clusters - AWS ROKS cluster</p> <p>(Note: if you change this names of the cluster groups, you will need to update the mkdocs.yml for the L3 demonstration script and rebuild (mkdocs gh-deploy) the demonstration script in the GitHub Pages).</p> <p>Finally, you need to test, test, and test again. I've created a couple of scripts that automate the manual steps the users do in Part 3 of the demonstration script. These are stored in the Satellite L3 repository (tools directory) and can be retrieved using the following command:</p> <pre><code> wget https://raw.githubusercontent.com/IBM/SalesEnablement-Satellite-L3/main/tools/deployIBMSatL3.bash\n wget https://raw.githubusercontent.com/IBM/SalesEnablement-Satellite-L3/main/tools/destroyIBMSatL3.bash\n</code></pre>"},{"location":"creating%20content/01%20Introduction/","title":"Introduction","text":"<p>It is strongly suggested you read through the MkDocs and Material theme documentation prior go building content.  You can also leverage existing content as working examples like the IBM Cloud Power Virtual Server L3 content:</p> <ul> <li> <p>Published content</p> </li> <li> <p>Source content</p> </li> </ul> <p>Where possible, you should follow the style guidelines from our Center of Excellence.</p> <p>A few suggestions:</p> <ul> <li> <p>Videos</p> <p>There are several options for referencing videos in your content.</p> <ol> <li> <p>Embed in content/repository - This is probably the simplest mechanism but there are limitations to the size of files in Git Hub. You can use tools like Handbrake to shrink video files. If you go this route, make sure you have the MkDocs videos plugin installed (mkdcos-video). Create a directory called _videos in your content folders and place videos there and reference using: <code>![type:video](./_videos/video.mp4)</code>.</p> </li> <li> <p>Use Seismic, Watson Media, Youtube or other video streaming services - For videos that are activities in Your Learning, you will probably want to use one these repositories.  You can also link to these videos in your content as well.</p> </li> </ol> </li> <li> <p>Links</p> <p>When linking to external content, make sure you use <code>target=\"_blank\"</code> in your href.  This will force the link to open in a new tab or window of the user's browser.</p> </li> <li> <p>Make things line up</p> <p>Things should line up in your content as described in the COE. MKDOCS can be a little strange to figure out. For instance, to get an image to line up under a numbered item, you must have the image definition preceded by 4 spaces, like:</p> <pre><code>1. Click the IBM Cloud portal menu ![](_attachments/hamburgerIcon.png), expand the **Observability** menu and click **Monitoring**.\n\n    ![](_attachments/MonitoringMenu.png)\n</code></pre> </li> </ul> <p>For more suggestions and how-tos, read the content in the SalesEnablement-L3-test-repo2 that was used as an example for building an L3.</p>"},{"location":"git-setup/01%20Introduction/","title":"Introduction","text":"<p>IBM's enterprise GitHub is used as the repository for our content.</p> <p>The instructions here assume you have a IBM GitHub identity.  If you don't, you will need one before proceeding. Go here to get started.</p>"},{"location":"git-setup/02%20Create%20IBM%20GitHub%20repository/","title":"Create IBM GitHub repository","text":"<p>Warning</p> <p>These steps only need to be completed if you are creating a new L3 and working with a brand new repository. If you are modifying an existing L3 or playing with the test repository, you will not need to do these steps.</p> <p>The creation of new repositories is automated, simple, and fast. If you are creating a new IBM Cloud L3, all you need to do is follow the steps below. </p> <ol> <li> <p>Go to https://github.ibm.com/open-source/request-a-new-repo-bot</p> </li> <li> <p>Go to Issues</p> </li> <li> <p>Click New issue</p> </li> <li> <p>Click Get started</p> </li> <li> <p>Complete the form. Just update the first 7 values in the form (remove teams, remove template).</p> <p>Below are the values I used in creating this repository. Be sure and change the \"users\" field to your name. The IBMSalesEnablement-TeamHybridCloud is a GitHub team that I created for the IBM Cloud team.</p> <pre><code>* name: SalesEnablement-L3-Guidance\n* users: andrewj2000\n* teams: IBMSalesEnablement-TeamHybridCloud\n* description: Sales Enablement guidance for creating L3 Learning PLans and content\n* template: template_1 (*Optional*) **REMOVE THIS LINE IF NOT NEEDED**\n* license: apache-2.0\n* approval: yes\n</code></pre> </li> <li> <p>Click Submit new issue</p> </li> <li>Watch your email and follow the directions there.</li> </ol>"},{"location":"git-setup/03%20Configure%20GitHub%20Pages/","title":"Configure GitHub Pages","text":"<p>Warning</p> <p>These steps only need to be completed if you are creating a new L3 and working with a brand new repository. If you are modifying an existing L3 or playing with the test repository, you will not need to do these steps.</p> <p>You need to configure GitHub Pages to work with MkDocs.  In theory, you should follow good source code repository practices and use at least a development and main branches, use pull requests, and properly review changes. Refer to the GitHub documentation for more information.</p> <p>Once you have your IBM GitHub repository created, follow these instructions:</p> <ol> <li>Go to your IBM GitHub repositories</li> <li> <p>Create a new branch called gh-pages</p> <p></p> </li> <li> <p>Go to \"Settings-&gt;Pages\"</p> </li> <li> <p>Change the Source Settings to point to the root of your gh-pages branch</p> <p>Initial screen may look like this:</p> <p></p> <p>You need to change the Source settings to look like below. Note, this may happen automatically when you create teh branch in step 2 above.</p> <p></p> </li> <li> <p>Click the link for your published site.</p> <p>This will go to a new view of your README.md file that was created with your new IBM GitHub repository. Note, at this point the output here isn't real \"pretty\". Don't worry, this will change once we start using MkDocs.</p> </li> <li> <p>Return to your IBM GitHub repository in your browser (browser back button if you didn't open step 5 in a new window/tab).</p> </li> <li> <p>Verify the Pages build completed by viewing the Actions tab in your repository.</p> <p></p> </li> </ol>"},{"location":"machine-setup/01%20Introduction/","title":"Introduction","text":"<p>In creating the initial L3 for IBM Cloud Satellite, I followed guidance from Jeff Goodhue and others.  I've attempted to capture it all here, but this may need further testing.  If your run into issues, reach out to me (@andrewj in slack).</p> <p>Instructions for both Mac and Windows are now included. Thanks to Connie West for helping with the Windows related installation information.</p> <p>Things change!</p> <p>The instructions here are a point in time. If you find things have changed (versions, steps, etc.), please open an issue in this git repository or if you have write permission, update the docs for the next person.</p>"},{"location":"machine-setup/02%20Install%20git/","title":"Install github desktop","text":"<p>We need to install both git and GitHub Desktop. </p>"},{"location":"machine-setup/02%20Install%20git/#git","title":"git","text":""},{"location":"machine-setup/02%20Install%20git/#macos","title":"MacOS","text":"<ol> <li>Open a terminal window.</li> <li> <p>Try running the git command:</p> <pre><code>git\n</code></pre> </li> <li> <p>If it is not already installed, a dialog will pop up to install it along with other developer tools. Follow the directions there to install. It will take a little time, but not the 40 minutes it initially says. If this doesn't occur, follow the directions below for Windows to install.</p> <p></p> </li> </ol>"},{"location":"machine-setup/02%20Install%20git/#windows","title":"Windows","text":"<ol> <li>Open a command prompt window.</li> <li> <p>Try running the git command:</p> <p></p><pre><code>git\n</code></pre> 3. If it returns an error like \"git not found\", follow the next steps. If it returns information on using the git command line, then skip to the GitHub Desktop section. </li> <li> <p>Open a browser to the following page:</p> <p>https://git-scm.com/book/en/v2/Getting-Started-Installing-Git</p> </li> <li> <p>Scroll down and find the instructions for your platform (Windows or MacOS) and follow the directions there.</p> </li> <li> <p>Once git is installed, set the PATH environment variable to include the git binary directory. By default, this should be \"C:/Program Files/git/bin\". Double check the path using file explorer.</p> <p>To update the PATH environment variable follow these steps:</p> <pre><code>a. Right-click on the Start Button.\nb. Select \u201cSystem\u201d from the context menu.\nc. Click \u201cAdvanced system settings\u201d\nd. Go to the \u201cAdvanced\u201d tab.\ne. Click \u201cEnvironment Variables\u2026\u201d\nf. Click variable called \u201cPath\u201d and click \u201cEdit\u2026\u201d\ng. Click \u201cNew\u201d\nh. Enter or paste the path that appeared in the warning message. It should be similar to \"C:/Program Files/git/bin\".\n</code></pre> </li> </ol>"},{"location":"machine-setup/02%20Install%20git/#github-desktop","title":"GitHub Desktop","text":"<ol> <li> <p>Using the the appropriate app store for your operating system, install GitHub Desktop. Search for GitHub Desktop in the appropriate app store and follow installation directions.</p> <p>Mac@IBM application</p> <p>IBM Windows App Store</p> <p></p> </li> </ol>"},{"location":"machine-setup/03%20Install%20MKDOCS%20and%20plugins/","title":"Install MkDocs and plugins","text":"<p>MkDocs is used to build nicely formatted output based upon the GitHub markdown content you will be creating. As an example, the IBM Cloud Satellite L3 is specified in this GitHub repository and the MKDOCS build output can be found here.</p> <p>MkDocs is well documented here: https://www.mkdocs.org/. You can also do google searches on MkDocs for lots of other useful content and primers. </p> <p>Before installing MkDocs, we need a few other tools.</p>"},{"location":"machine-setup/03%20Install%20MKDOCS%20and%20plugins/#python","title":"Python","text":"<p>Python is a powerful scripting language. It is used by MkDocs.</p>"},{"location":"machine-setup/03%20Install%20MKDOCS%20and%20plugins/#mac","title":"Mac","text":"<p>For Mac users, python may already be installed on your machine.  Open a terminal and type python. If it is not found, instructions can be found in the MkDocs Installation guide which includes a link on how to install Python.</p>"},{"location":"machine-setup/03%20Install%20MKDOCS%20and%20plugins/#windows","title":"Windows","text":"<p>For MS Windows users, open a command prompt and type in python. This should open the MS App store and you can install python from there.</p> <p>Windows users</p> <p>If you are using Windows, some of the commands below may not work. Try using python -m like this: </p><pre><code>    python -m pip install mkdocs\n    python -m mkdocs\n</code></pre> For a more permanent solution, you may need to edit your PATH environment variable to include the Scripts directory of your Python installation. Recent versions of Python include a script to do this for you. Navigate to your Python installation directory (for example C:\\Python38), open the Tools, then Scripts folder, and run the win_add2path.py file by double clicking on it. Alternatively, you can download the script and run it (python win_add2path.py)."},{"location":"machine-setup/03%20Install%20MKDOCS%20and%20plugins/#pip","title":"Pip","text":"<p>Pip is a python utility for installing python packages. </p> <p>Open a Command prompt (Windows) or terminal (MaCOS) to run the following...</p> <p>To install, follow these steps:</p> <ol> <li> <p>Install pip:</p> <p></p><pre><code>python -m pip install --upgrade pip\n</code></pre> or <pre><code>python3 -m pip install --upgrade pip\n</code></pre> <p>If you receive a message about a newer version being available, follow the directions to upgrade pip.</p> </li> <li> <p>If during the last step you received a PATH warning, you need to update your default PATH environment variable.</p> <p></p> <p>MacOS</p> <p>Use a text editor to open the .zprofile file in your home directory and add the PATH your copied to the PATH environment variable in the file. The video below shows how this is done. Note, the contents of your .zprofile may look a little different. Don't change anything other than the PATH variable and make sure you add a trailing colon (:).</p> <p></p> <p>Windows</p> <p>To update the PATH environment variable follow these steps:</p> <pre><code>a. Right-click on the Start Button.\nb. Select \u201cSystem\u201d from the context menu.\nc. Click \u201cAdvanced system settings\u201d\nd. Go to the \u201cAdvanced\u201d tab.\ne. Click \u201cEnvironment Variables\u2026\u201d\nf. Click variable called \u201cPath\u201d and click \u201cEdit\u2026\u201d\ng. Click \u201cNew\u201d\nh. Enter or paste the path that appeared in the warning message. It should be similar to \"/Users/andrewj/Library/Python/3.9/bin\".\n</code></pre> </li> <li> <p>If you had to perform the last step, close your terminal or command prompt and open a new one in order for the updated PATH to be used.</p> </li> <li> <p>Install MKDOCS</p> <pre><code>pip install mkdocs\n</code></pre> <p>or</p> <pre><code>pip3 install mkdocs\n</code></pre> </li> <li> <p>Install MKDOCS material theme</p> <p>Material is the name of the theme we are using in MkDocs.  You can learn more about it here.</p> <pre><code>pip install mkdocs-material\n</code></pre> <p>or </p> <pre><code>pip3 install mkdocs-material\n</code></pre> </li> <li> <p>Install MKDOCS macros plugin</p> <p>The macros plugin for MkDocs provides lots of useful tools that we use in our builds.  You can learn more about it here.</p> <pre><code>pip install mkdocs-macros-plugin\n</code></pre> <p>or </p> <pre><code>pip3 install mkdocs-macros-plugin\n</code></pre> </li> <li> <p>Install MkDocs video plugin</p> <p>The MkDocs video plugin is used to embed videos in our documents.  You can learn more about it here.</p> <pre><code>pip install mkdocs-video\n</code></pre> <p>or</p> <pre><code>pip3 install mkdocs-video\n</code></pre> </li> <li> <p>Install pymdown extensions:</p> <pre><code>pip install pymdown-extensions\n</code></pre> <p>or </p> <pre><code>pip3 install pymdown-extensions\n</code></pre> </li> <li> <p>Install print-site plugin:</p> <pre><code>pip install mkdocs-print-site-plugin \n</code></pre> <p>or</p> <pre><code>pip3 install mkdocs-print-site-plugin \n</code></pre> </li> <li> <p>Install glightbox plugin:</p> <pre><code>pip install mkdocs-glightbox\n</code></pre> <p>or</p> <pre><code>pip3 install mkdocs-glightbox\n</code></pre> </li> <li> <p>For creating PDF files, install the mkdocs-print-site-plugin. Follow the directions here: https://timvink.github.io/mkdocs-print-site-plugin/how-to/export-PDF.html.</p> <pre><code>pip install print-site\n</code></pre> <p>or</p> <pre><code>pip3 install print-site\n</code></pre> </li> <li> <p>Install navigate plugin to allow use of nav file for Table of contents.</p> <pre><code>pip install mkdocs-literate-nav\n</code></pre> <p>or </p> <p></p><pre><code>pip2 install mkdocs-literate-nav\n</code></pre> Note, there are many more MkDocs themes and plugins that you may find useful in your content development.  However, to be consistent with other IBM Cloud L3s, I suggest sticking with the Material plugin that you just installed. </li> </ol>"},{"location":"machine-setup/04%20Visual%20Studio%20Code/","title":"Visual Studio Code","text":"<p>Three main tasks here:  - install Visual Studio Code (VSC) - install some extensions to VSC - configure git and VSC</p>"},{"location":"machine-setup/04%20Visual%20Studio%20Code/#install-vsc","title":"Install VSC","text":"<p>Using the IBM app store for your operating system, install Visual Studio Code (VSC). </p> <pre><code>Mac@IBM application\n\n&lt;a href=\"https://w3.ibm.com/download/standardsoftware/PC/lang_en/issiCatalogPC.html\" target=\"_blank\"&gt;IBM Windows App Store&lt;/a&gt;\n\n![](_attachments/VSC.png)\n</code></pre> <p>More information about VSC can be found here.</p>"},{"location":"machine-setup/04%20Visual%20Studio%20Code/#install-vsc-extensions","title":"Install VSC extensions","text":"<p>Install the following VSC extensions. This is done using VSC, but you can also explore the VSC catalog. To learn more about extensions go here. </p> <ul> <li>Acrolinx</li> <li>Auto-Open Markdown Preview</li> <li>Code Spell Checker</li> <li>GitHub Pull Requests</li> <li>GitHub Repositories</li> <li>Hashicorp Terraform</li> <li>Markdown All in One</li> <li>Markdown Preview Enhanced</li> <li>YAML</li> </ul> <p>Here is a short video (no audio) that shows how to install an extension in VSC:</p> <p></p>"},{"location":"machine-setup/04%20Visual%20Studio%20Code/#integrate-git-and-vsc","title":"Integrate git and VSC","text":"<ol> <li>Open VSC if not already opened.</li> <li> <p>Open a terminal in VSC.</p> <p></p> </li> <li> <p>In the terminal, run the following commands, replacing YOURGITID and YOUR_EMAIL with your appropriate ID and email address.</p> <pre><code>git config --global user.name YOUR_GITID\n</code></pre> <pre><code>git config --global user.email YOUR_EMAIL\n</code></pre> </li> </ol>"},{"location":"using%20MkDocs/01%20Introduction/","title":"Introduction","text":"<p>If you have everything setup properly, you should be ready to try and create or update some markdown and to run a MkDocs build.</p> <p>Tip</p> <p>MkDocs has a built in server so you can dynamically watch the updates you are making on your local copy of your repository as the content is saved.  I'm not going to document how to do that, but reference the MkDocs documentation for details. I personally don't do this.</p> <p>The instructions in the following chapters reference a test repository I created. You can use this repo to learn. You can't break anything in it so have fun.</p>"},{"location":"using%20MkDocs/02%20Clone%20the%20repository/","title":"Clone the repository","text":"<p>We will be using Visual Studio Code (VSC) to do most your work, however, there will be times when you will need to use a web browser to access the github repository (especially if creating a new course). I'll note when something doesn't have to be done if your just updating a course.</p>"},{"location":"using%20MkDocs/02%20Clone%20the%20repository/#clone-the-repository-to-your-local-machine","title":"Clone the repository to your local machine","text":"<p>You can use the new repository you created earlier if you are creating a new course, use and existing L3 repository, or you can play with this test repository: https://github.com/IBM/SalesEnablement-L3-test-repo2.</p> <p>Using SSH to clone</p> <p>It is best to use SSH to clone and synchronize things to GitHub, however it is not required for the repositories we are using. In the future, if you need to work with repositories in github.ibm.com, you will need to enable SSH. You can learn how to do this here.</p> <ol> <li> <p>Open the repository in your browser.</p> <p>https://github.com/IBM/SalesEnablement-L3-test-repo2</p> </li> <li> <p>Click the green Code drop down.</p> </li> <li>Click the HTTPS tab under Clone. </li> <li> <p>Copy the HTTPS clone link.</p> <p>Image below uses SSH</p> <p></p> </li> <li> <p>Open VSC.</p> </li> <li> <p>At the VSC welcome screen, click Clone Git Repository.</p> <p></p> </li> <li> <p>Paste the SSH clone link for the repository into the entry field and Enter.</p> <p></p> </li> <li> <p>Specify where you want to save your clone on your local machine and then click Select as Repository Destination.</p> <p></p> <p>Where should I save this?</p> <p>It really doesn't matter, but I would suggest creating a directory where you will keep all your Sales Enablement L3s. Perhaps something like ~/Documents/SalesEnablementL3s/. When you specify the directory, it will create a subdirectory with the name of the repository.</p> </li> <li> <p>Click either Open or Open in New Window on the pop-up dialog.</p> </li> </ol> <p>You now have successfully clone the repository form GitHub to your local machine.</p>"},{"location":"using%20MkDocs/03%20Create%20MkDocs%20project/","title":"Create MkDocs project","text":"<p>Warning</p> <p>These steps only need to be completed if you are creating a new L3 and working with a brand new repository. If you are modifying an existing L3 or playing with the test repository, you will not need to do these steps.</p> <p>Now that you have a clone of the repository, next you need to initialize MkDocs for the repository. </p>"},{"location":"using%20MkDocs/03%20Create%20MkDocs%20project/#initializing-a-new-repository-for-mkdocs","title":"Initializing a new repository for MkDocs","text":"<ol> <li> <p>Open a terminal in VSC.</p> <p></p> <p>You can resize the terminal window by grabbing the frame bar between the welcome screen and the terminal. Notice the terminal opens with the path set to the directory that was created for your clone repository.</p> </li> <li> <p>Run the mkdocs new command specifying the current directory (.) for the name.</p> <pre><code>mkdocs new .\n</code></pre> <p></p> <p>Notice 2 new files and the docs directory are created.</p> </li> <li> <p>In the VCS terminal, create a .gitignore file to ignore file. </p> <pre><code>echo \"site/\" &gt;&gt; .gitignore\n</code></pre> <p>The .gitignore is used to exclude certain files or directories from being pushed up to the GitHub repository. The above command created the file and populated with the site directory. The site directory will contain build files that MkDocs generates. These files do not need to be pushed up to GitHub.</p> <p></p> </li> </ol>"},{"location":"using%20MkDocs/04%20The%20mkdocs%20file/","title":"The mkdocs file","text":"<p>You are ready to start creating content. The structure of a published MkDocs repository is controlled by the mkdocs.yml file. </p> <p>Do you know YAML?</p> <p>If you are not familiar with Yet Another Markup Language (YAML), that is OK. You can learn more by doing google searches if you want. But one very critical things... YAML has very strict formatting rules. Incorrect use of quotes, colons, and dashes or not lining sections up will result in errors.</p>"},{"location":"using%20MkDocs/04%20The%20mkdocs%20file/#the-mkdocsyml-file","title":"The mkdocs.yml file","text":"<p>For this example we will keep it real simple. The mkdocs.yml file that is created with the mkdocs new command in the previous chapter is very basic. If you are creating a new L3, I suggest copying the mkdocs.yml from an existing IBM Cloud level 3 course and modifying it. This is what was done for the SalesEnablement-L3-test-repo2 repository.</p> <p>You should spend some time studying the file and its structure. The sections used in the IBM Cloud L3s are described at a high level below. The samples given are based on the SalesEnablement-L3-test-repo2 repository when I initially created it. Others may have modified since, so what you see now in the repository may differ.</p> <ol> <li> <p>In VSC, click the mkdocs.yml file in the *EXPLORER view.</p> <p>As you modify your mkdocs.yml file and add content in your docs directory, you will notice on the left hand side of Visual Studio Code that a count of the Unstaged Changes appear on the Source Control icon.  </p> <p>While listed as steps below, you don't have to do anything here, but you should go through each step and learn about the different sections used by other IBM Cloud L3s. There are many other configurations that could be specified, but using these will keep things consistent with other IBM Cloud L3s.</p> </li> <li> <p>Project info</p> <p>This section has general information about the project and who created it, etc. </p> <pre><code># Project info\nsite_name: IBM Cloud Sample Level 3 \nsite_description: IBM Cloud Sample Level 3 \nsite_author: Andrew R. Jones (andrewj@us.ibm.com)\ncopyright: Copyright &amp;copy; 2024 IBM\n</code></pre> <ul> <li>site_name: shown as the title on the published pages</li> <li>site_description: not sure if this is used anywhere</li> <li>site_author: not sure if this is used anywhere</li> <li>copyright: shown at the bottom of the published pages</li> </ul> </li> <li> <p>Repository</p> <p>This section specifies what GitHub repository is used for the content.</p> <pre><code># Repository\nrepo_name: IBM/SalesEnablement-test-repo2\n#repo_url: https://github.com/IBM/SalesEnablement-L3-test-repo2\n#edit_uri: edit/master/docs\ndocs_dir: docs\n</code></pre> <ul> <li>repo_name: the name of the GitHub repository</li> <li>repo_url: URL of the repo </li> <li>edit_uri: not sure how this is used</li> <li>docs_dir: used to specify subdirectory for all markdown content</li> </ul> <p>I typically comment out (#) the repo_url and edit_uri. If you don't, then links to the GitHub repository will appear on the published pages. We may do this in the future to allow users to directly open issues in GitHub.</p> <p></p> </li> <li> <p>theme</p> <p>The theme sections specifies what MkDocs theme to use and attributes for the theme. Recall we installed the material theme. There are others, but thus far we have standardized IBM Cloud L3s with the material theme. There are also many other attributes that could be specified, but these will suffice for now. You can try changing these and viewing the results, but again, would suggesting keeping these values for consistency with the other L3s.</p> <pre><code>theme:\n  name: material\n  features:\n    - navigation.instant\n    - navigation.tracking\n    - content.code.annotate\n    - content.code.copy\n  palette:\n    - media: \"(prefers-color-scheme: light)\"\n      scheme: default\n      toggle:\n        icon: material/toggle-switch-off-outline\n        name: Switch to dark mode\n    - media: \"(prefers-color-scheme: dark)\"\n      scheme: slate\n      toggle:\n        icon: material/toggle-switch\n        name: Switch to light mode\n</code></pre> </li> <li> <p>plugins</p> <p>The plugins sections tells the build process what plugins are used by the content. We installed these plugins already. </p> <p></p><pre><code>plugins:\n    - mkdocs-video\n    - macros\n    - search\n</code></pre> 6. markdown_extensions <p>The markdown_extensions also control the look and feel of the published pages.</p> <pre><code>markdown_extensions:\n  - sane_lists\n  - pymdownx.details\n  - admonition\n  - pymdownx.highlight:\n      anchor_linenums: true\n  - pymdownx.inlinehilite\n  - pymdownx.snippets\n  - pymdownx.superfences\n  - pymdownx.keys\n  - attr_list\n  - md_in_html\n</code></pre> </li> <li> <p>nav</p> <p>The nav (short for navigation) section defines the table of content for the published pages and specifies where the content comes from (file names).</p> <pre><code>nav:\n  - Introduction: 'index.md'\n  - Part 1 - Overview:\n    - 'Introduction': 'Part 1/01 Introduction.md'\n    - 'Reserve the environment': 'Part 1/02 Reserve.md'\n  - Part 2 - Provisioning a PowerVS workspace:\n    - 'Introduction': 'Part 2/01 Introduction.md'\n   - 'Click through demonstration of a workspace being provisioned': 'Part 2/03 Clickthru-service.md'\n  - Part 3 - Next steps:\n    - 'Next steps': 'Part 3/01 Next steps.md'\n</code></pre> <p>The above structure is what I've used in the other IBM Cloud L3s. Using the directory structure and file naming convention keeps the VSC EXPLORER view consistent with the table of contents.</p> </li> <li> <p>extra</p> <p>Think of the extra section as where you can define global variables to be used in your content. Instead of typing the same name in 10 different markdown files, just specify it once here and then reference it in the 10 files using the {{variable}} notation. You will see this in action when we start editing markdown.</p> <p>I don't recall what the generator: false extra does.</p> </li> </ol> <p>Again, lots of other things could go in the mkdocs.yml file, but this is what you need to know to work with the existing IBM Cloud L3s.</p>"},{"location":"using%20MkDocs/05%20Creating%20content/","title":"Creating content","text":"<p>The next step is to start creating or modifying content. The content is created using GitHub markdown language. There are lots of tutorials available on it as well as what is in MkDocs' documentation, specifically the Writing your docs section. </p>"},{"location":"using%20MkDocs/05%20Creating%20content/#creating-new-content","title":"Creating new content","text":"<ol> <li>Right click on docs in VSC's EXPLORER view and select New File or New Folder. </li> </ol> <p>!!! Important \"Create and use the nav structure\"</p> <pre><code>   Remember you must use the table of content structure defined in the **nav** section of mkdocs.yml. It doesn't matter which you create first, but they must be in sync when before building the final output (this comes later).\n</code></pre> <p>MkDocs supports embedded images, videos, and probably other multimedia. Current IBM Cloud L3s have images and videos. With in each subdirectory created in the docs directory, create a _attachments and _videos directory for the content you will be using. Note, you can do this once and then in VSC do a copy and paste of the empty directories.</p> <p></p> <p>No step by step directions for creating content. Look at the sample docs or an existing L3 to learn how. Make sure you follow all the Sales Enablement content standards just as if it was a PPT or Word document. Things like grammar, spelling, consistent spacing and alignment, and the like needs to be followed.</p> <p>In these samples you will see how to include images, videos, links to other web sites, and common elements in L3s that align with our Center of Excellence guidelines.</p> <p>Recall from the nav section that the first page of the published output is the index.md file. The mkdocs new command created that file along with the mkdocs.yml file. This file will be your course introduction and the first page that users see.</p>"},{"location":"using%20MkDocs/05%20Creating%20content/#saving-documents","title":"Saving documents","text":"<p>As you save documents in VSC, only your local repository is being updated at this time. You will notice a number appear next to the Source Control icon in VSC. Learn how to push your changes to the master GitHub repository and how to build the MkDocs output in the next chapters.</p> <p>There is a lot more to VSC</p> <p>Not only in addition to the other extensions you may have seen, there are a lot of built-in capabilities of VSC. I encourage you to play around and also google VSC to learn more. Also play, with the plug-ins that I suggested installing like the spell checker and Acrolinx. I'll try and add sections for these in the future.</p>"},{"location":"using%20MkDocs/06%20Committing%20to%20GitHub/","title":"Committing to GitHub","text":"<p>After saving all your open documents in Visual Studio Code (VSC), it is time to commit those changes to the master repository in GitHub. </p> <p>Recall, GitHub is all about document management. In a typical software development process you would create a branch make modifications there, do your testing, and then merge that branch into the master branch. We should probably do this as well, but there seems to be a limitation with GitHub Pages (which is what we use to serve the final content with). The limitation is that you can only have one Pages site and you can't have a branch site. I get around this when refreshing a course by creating a separate \"test\" GitHub repository, do my content creation and testing of output there, and then copy all those files to the specific GitHub repository and do a final build there and publish the output. This isn't a big issue for creating new courses or making small \"on-the-fly\" changes, but it is an issue with doing large refreshes. You don't want to publish parts of a refresh that may affect current users.</p> <p>Feel free to contact me individually and we can discuss above in detail when the time comes. For now, we will pretend we are creating a new course or just making an \"on-the-fly\" change.</p>"},{"location":"using%20MkDocs/06%20Committing%20to%20GitHub/#committing-your-updates","title":"Committing your updates","text":"<ol> <li> <p>Click the Source Control icon in VSC.</p> <p></p> </li> <li> <p>Enter a message about what you are committing.</p> <p>You should try to make this a meaningful message as it will appear as part of the history of the updates in GitHub.</p> <p>Notice below the Commit button are all the files that have been modified, added, or removed.</p> <p></p> </li> <li> <p>Click Commit.</p> <p></p> <p>Note, you can perform many commits (thus adding more messages and info in GitHub). This doesn't actually push the files up to GitHub, that comes next.</p> <p>VSC pop-up dialog</p> <p>If you get a dialog stating something like There are no staged changes to commit, click on Always  to always sage your changes and commit them directly.</p> </li> <li> <p>Click Sync Changes.</p> <p></p> <p>VSC dialog</p> <p>If you get a dialog stating something like This action will pull and  push commits from and to origin/main, click on OK, Don't Show Again.</p> <p>Connect to GitHub dialog</p> <p>The first time you do this, you may get a GitHub sign in dialog. Use the Sign in with your browser button and follow the directions provided which should end with you clicking a Authorize git-ecosystem button.</p> <p>Note, adding a message here is not required, but a good practice.</p> <p>This step will vary in duration based on the number and size of the files that are being sent up to the GitHub repository.</p> </li> </ol> <p>Once everything is committed and synced, you are now ready to use MkDocs to build the pretty version of your markdown content and publish it to GitHub pages.</p>"},{"location":"using%20MkDocs/07%20Building%20with%20MkDocs/","title":"Building with MkDocs","text":"<p>Once these changes are commited, to do the build with MkDocs, follow these steps.</p> <ol> <li> <p>If not already open, open a terminal in Visual Studio Code.</p> <p></p> </li> <li> <p>Run mkdocs gh-deploy</p> <pre><code>mkdocs gh-deploy\n</code></pre> <p></p> </li> </ol> <p>If all works properly, as the last line of the output shows, your published pages will be available in a few minutes at the URL specified. In the case of SalesEnablement-L3-test-repo2 the output is published to https://IBM.github.io/SalesEnablement-L3-test-repo2/.</p> <p>The few minutes is for the time for the GitHub action to run that finalizes the build and pushes the MkDocs generated HTML to be published to github.io. This is usually pretty quick, but if you do several builds of the same content within a few minutes of each other, the GitHub action requests will get throttled and start to take longer.</p>"},{"location":"using%20MkDocs/07%20Building%20with%20MkDocs/#troubleshooting-tips-for-mkdocs-gh-deploy","title":"Troubleshooting tips for mkdocs gh-deploy","text":"<p>Here are few common messages you may see when mkdocs gh-deploy runs. Warnings can usually be ignored, but should probably be addressed.  Errors will need to be resolved before the build will succeed.</p> <ul> <li> <p>WARNING -  Version check skipped: No version specified in previous deployment.: this typically occurs only the first time you run mkdocs gh-deploy on a new clone. </p> </li> <li> <p>WARNING -  Doc file 'Part 1/02 Reserve.md' contains a relative link '_attachments/ITZ-1XXXX.png', but the target 'Part 1/_attachments/ITZ-1XXXX.png' is not found among documentation files.: probably should be more than a warning, as this will result in a missing image.</p> </li> <li> <p>ERROR   -  Error reading page 'Part 1/Page not used.md': Document is empty: message is self explanatory. Not sure why it is an error, but the build won't proceed until each file has content.</p> </li> <li> <p>INFO    -  The following pages exist in the docs directory, but are not included in the \"nav\" configuration: - Part 1/Page not used.md: message is self explanatory.</p> </li> </ul> <p>Unfortunately, just because the build doesn't show any errors doesn't mean your content is perfect. A few common things you may see in the generated output:</p> <ul> <li> <p>no such element: dict object['name']: if you attempt to reference an extra variable from your mkdocs.yml file that doesn't exist, you will see text like this in the published document.</p> <p></p> </li> </ul>"},{"location":"using%20MkDocs/07%20Building%20with%20MkDocs/#view-the-action-status-in-github","title":"View the action status in GitHub","text":"<ol> <li> <p>Open a browser window to the GitHub repository: https://github.com/IBM/SalesEnablement-L3-test-repo2.</p> </li> <li> <p>Click Actions.</p> <p></p> </li> <li> <p>Click the top most pages build and deployment link.</p> <p>Note, the status may still show \"building\".</p> <p></p> <p>The deployment shows all the steps of the build process. Feel free to explore the information provided. The link the the deployed content is also available.</p> <p></p> </li> </ol> <p>Information provided on the above pages may be helpful in debugging issues.</p>"}]}